#pragma once
#ifndef __MATRIX3_H_
#define __MATRIX3_H_
#include "mathLib.h"
#include <ostream>

namespace Maths
{
	class Vector2;
	class Vector3;
	class DLLEXPORT Matrix3
	{
		union
		{
			struct {
				float values_[9];
			};
			struct {
				float values2D_[3][3];
			};
			struct
			{
				float
					m_r1c1, m_1r2, m_1c3,
					m_r2c1, m_2r2, m_2c3,
					m_r3c1, m_3r2, m_3c3;
			};
		};
	public:
		//\===============================================================================================================================
		//\
		//\	CONSTRUCTOR AND DESTRUCTORS
		//\
		//\===============================================================================================================================
		Matrix3();
		Matrix3(const float a_values[9]);
		Matrix3(
			const float& a_11, const float& a_12, const float& a_13,
			const float& a_21, const float& a_22, const float& a_23,
			const float& a_31, const float& a_32, const float& a_33);

		//\===============================================================================================================================
		//\	Create Rotation Matrix from a bearing
		//\===============================================================================================================================
		Matrix3(const float& a_bearingInRadiansZ);

		//\===============================================================================================================================
		//\	Create Translation Matrix from a Vector3
		//\===============================================================================================================================
		Matrix3(const Vector3& a_v3d);

		//\===============================================================================================================================
		//\	Create Translation Matrix from a Vector2
		//\===============================================================================================================================
		Matrix3(const Vector2& a_v2d);

		~Matrix3();

		//\===============================================================================================================================
		//\
		//\	STATIC CONSTANTS
		//\
		//\===============================================================================================================================

		//\===============================================================================================================================
		//\	Create Identity Matrix
		//\===============================================================================================================================
		static Matrix3 IDENTITY;

		//\===============================================================================================================================
		//\	Create Zero Matrix
		//\===============================================================================================================================
		static Matrix3 ZERO;

		//\===============================================================================================================================
		//\
		//\	OPERATOR OVERLOADS
		//\
		//\===============================================================================================================================

		//\===============================================================================================================================
		//\	Overload OStream << 
		//\===============================================================================================================================
		friend std::ostream& operator<<(std::ostream& stream, Matrix3& a_matrix);

		//\===============================================================================================================================
		//\	Access Individual Elements in the Matrix
		//\===============================================================================================================================
		float& operator()(const unsigned& row, const unsigned& col);

		//\===============================================================================================================================
		//\	Addition Operator Overloads
		//\===============================================================================================================================
		Matrix3 operator+(Matrix3& a_m3) const;
		Matrix3& Matrix3::operator+=(Matrix3& a_m3);

		//\===============================================================================================================================
		//\	Multiplication Operator Overloads
		//\===============================================================================================================================
		Matrix3 operator*(Matrix3& a_m3) const;
		Matrix3& Matrix3::operator*=(Matrix3& a_m3);

		Vector3 operator*(Vector3& a_m3) const;
		Vector3 Matrix3::operator*=(Vector3& a_m3);

		//\===============================================================================================================================
		//\
		//\	GETTERS
		//\
		//\===============================================================================================================================

		//\===============================================================================================================================
		//\	Returns the translation as a 2D Vector 
		//\===============================================================================================================================
		Vector2 GetTranslation2D() const;

		//\===============================================================================================================================
		//\	Returns the translation as a 3D Vector 
		//\===============================================================================================================================
		Vector3 GetTranslation3D() const;

		//\===============================================================================================================================
		//\	Returns the rotation as a 2D Vector 
		//\===============================================================================================================================
		Vector2 GetRotation2D() const;

		//\===============================================================================================================================
		//\	Returns the rotation as a 3D Vector 
		//\===============================================================================================================================
		Vector3 GetRotation3D() const;

		//\===============================================================================================================================
		//\	Returns the rotation about the Z-axis as a float
		//\===============================================================================================================================
		float GetBearingInRadiansZ() const;

		//\===============================================================================================================================
		//\	Returns the scale as a 2D Vector 
		//\===============================================================================================================================
		Vector2 GetScale2D() const;

		//\===============================================================================================================================
		//\	Returns the scale as a 3D Vector 
		//\===============================================================================================================================
		Vector3 GetScale3D() const;

		//\===========================================================================================
		//\ Inverse - Get the inverse of the matrix
		//\===========================================================================================
		float Determinant() const;
		bool Inverse();

		//\===============================================================================================================================
		//\
		//\	SETTERS
		//\
		//\===============================================================================================================================

		//\===============================================================================================================================
		//\	Set the translation with a 3D Vector
		//\===============================================================================================================================
		void SetTranslation(const Vector3& a_v3d);

		//\===============================================================================================================================
		//\	Set the translation with a 2D Vector
		//\===============================================================================================================================
		void SetTranslation(const Vector2& a_v2d);

		//\===============================================================================================================================
		//\	Set the rotation with a 2D Vector
		//\===============================================================================================================================
		void SetRotation(const Vector2& a_v2d);

		//\===============================================================================================================================
		//\	Set the rotation with a 3D Vector
		//\===============================================================================================================================
		void SetRotation(const Vector3& a_v3d);

		//\===============================================================================================================================
		//\	Set the rotation with a bearing in radians
		//\===============================================================================================================================
		void SetRotation(const float& a_bearingInRadiansZ);

		//\===============================================================================================================================
		//\
		//\	VOID METHODS
		//\
		//\===============================================================================================================================

		//\===============================================================================================================================
		//\	Rotate the matrix by a radian about the Z-axis
		//\===============================================================================================================================
		void RotateZ(const float& a_fAngle);
		friend Matrix3 CreateRotationMatrix3AboutZ(const float fAngleRadians);

		friend Matrix3 CreateTranslationMatrix3(const Vector2& a_v2);

		//\===============================================================================================================================
		//\	Scale the Matrix by a float
		//\===============================================================================================================================
		void Scale(const float& a_scale);
	};
}
#endif //__MATRIX3_H_